---
title: "Code Robustness"
format: 
  revealjs:
    footer: "Code Robustness"
    chalkboard: true
    mouse-wheel: true 
    code-fold: true
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(
  cache = FALSE,
  echo = TRUE,
  message = TRUE, 
  warning = TRUE,
  error = TRUE
  )
```


# III. Code robustness

In computer science, **robustness** is the ability of a computer system to cope with errors during execution and cope with erroneous input.

---

![](img/errormanagement_implicit.svg)

---

![](img/errormanagement_explicit.svg)

---

![](img/errormanagement.svg)

---

## Error management {.smaller}
### Protect the user 

- Make assumptions and expectations explicit.
  - check values before processing them
  - identify and manage exceptions
- Produce errors when expectations are not met.
- Consider error options, and perform error management:
  - redirect the program
  - log or report the error, to allow the user (or developer) to troubleshoot
  - if necessary: abort the run



## Advanced robustness: testing {.smaller}
### Protect the developer (including you!) 

- Test the expected behavior of your functions:
  - Confirm a known output given a known input
  - Do errors get produced as expected when the input calls for it?
- Capture unexpected errors to identify further options for error management
- You can automate running tests when pushing to Github using Continuous Integration
- Tests are **definitely** worth learning when your project increases in size!


## Throwing an error  {.smaller}
#### Python
```{python}
def read_vector_value(index = 0, my_vector = [10,5,4,12,25]):
    if index > len(my_vector) - 1:
        raise IndexError('Index higher than vector length.')
    return my_vector[index]

read_vector_value(index=6)
```

#### R
```{r}
read_vector_value <- function(index = 1, my_vector = c(10, 5, 4, 12, 25)){
  if ( index > length(my_vector) ) 
    stop('Index higher than vector length.')
  my_vector[index]
  }

read_vector_value(index = 6)

```


## Why not simply adjust the function output? {.smaller}
#### Python 
```{python}
def read_vector_value(index=0, my_vector=[10,5,4,12,25]):
    if index > len(my_vector) - 1:
        return None
    return my_vector[index]

print(read_vector_value(index=6))
```

#### R 
```{r}
read_vector_value <- function(index = 1, my_vector = c(10, 5, 4, 12, 25)){
  if ( index > length(my_vector) ) 
    return(NULL)
  return(my_vector[index])
  }

read_vector_value(index = 6)

```

. . . 


::: {.callout-important}
### Why not?
- Because it is unclear if `None` (`NULL`) is expected behavior or indicative of a problem.
- Because you now need to handle `None` (`NULL`) downstream
:::


## Redirecting with exceptions

If you do not want to interrupt your script when an error is raised: use `try/catch` (`except` in Python).

::: {.callout-note}
#### Note
Note that Python and MATLAB allow you to distinguish by error type!
:::


--- 

### Python

```{python }
def read_vector_value(index=0, my_vector=[10,5,4,12,25]):
    if index > len(my_vector) - 1:
        raise IndexError('Index higher than vector length')
    return my_vector[index]
```

This will catch the exception:
```{python }
try:
  read_vector_value(6)
except IndexError: ## raised
  print("This is an exception")
except ValueError: # not raised
  print("This is an exception")

```

---

### R 

```{r}
read_vector_value <- function(index = 1, my_vector = c(10, 5, 4, 12, 25)){
  if ( index > length(my_vector) ) 
    stop('Index higher than vector length.')
  my_vector[index]
  }
```

This will catch the exception:
```{r}
tryCatch(
  read_vector_value(index = 6),
  error = function(e) {
    message("An error occurred: ", e$message)
  }
)

```

----

### MATLAB

``` matlab
function value = read_vector_value(index, my_vector)
    if index > length(my_vector)
        ME = MException('MyComponent:indexError', ...
            'Index higher than vector length');
        throw(ME)
    end
    value = my_vector(index);
end

```

This will catch the exception:
```matlab
try
  value = read_vector_value(6, [10,5,4,12,25]);
catch ME
  if (strcmp(ME.identifier, 'MyComponent:indexError'))
    disp("This is an exception")
  end
end
```


## Validating input

::: columns

::: {.column width="30%"}
![](img/gatekeeper.png)
:::


::: {.column width="70%"}
Consider early statements in the script to validate (data) input as a gatekeeper.

With if/else:
```{r} 
protein_data <- data.frame()

if (nrow(protein_data) == 0)
  stop('Data set cannot be empty')
```
:::
:::


::: {.callout-note}
# Tip
Create a function to check inputs or use an argument parser
:::


## Expectations and assumptions {.smaller}

### Expect the worst

::: columns

::: {.column width="50%"}
- use of wrong input values for functions
- malformed text input
- wrong data types
:::

::: {.column width="50%"}

![](https://4.bp.blogspot.com/_YzKCMr-tcMM/S9bN9dGqgBI/AAAAAAAAALo/cxqBx5AaoYk/s640/23GORILLA.jpg)
:::
:::



<!-- ## Your turn: explicit expectations -->

<!-- ### Identify assumptions in your code -->
<!-- - What assumptions/expectations exist on your data or (user) input? -->
<!-- - What assumptions/expectations exist on the input of (a) function(s)? -->

<!-- ### Make the input/data assumptions explicit -->
<!-- - Write a piece of code that tests the validity of data/input, and reports an error if the expectations are not met. -->

<!-- ### Test the input for a function -->
<!-- - Modify the code inside your function to check the value of the arguments using if/else statements and raise an error in case an argument is out of the range. -->

---

### Defensive programming {.smaller}

- Assume that mistakes will happen and introduce guards against them.
- Use assertions for things you believe will/should never happen.
- Use exceptions for anomalous or exceptional conditions requiring special processing.

---

#### Python
```{python}
def kelvin_to_celsius(temp_k):
    """
    Converts temperature in Kelvin
    to Celsius.
    """
    assert temp_k >= 0.0, "ERROR: negative T_K"
    temp_c = temp_k - 273.15
    return temp_c
```

---

#### R
```{r}
kelvin_to_celsius <- function(temp_k) {
  #' Converts temperature in Kelvin to Celsius.
  if (temp_k >= 0.0)
    stop("ERROR: negative T_K")
  temp_c = temp_k - 273.15
  temp_c
}
```

:::{.callout-note}
### Assertion in R
Often assertions are in R are conducted with the `stopifnot` function. 
Also, checkout use [`assert_that`](https://github.com/hadley/assertthat) package for more informative error messages 
:::

## Testing your code

Untested software can be compared to uncalibrated detectors

>_Before relying on a new experimental device, an experimental scientist always establishes its accuracy. A new detector is calibrated when the scientist observes its responses to known input signals. The results of this calibration are compared against the expected response._

<!-- #### How do you now check the validity of your analysis? -->

<!-- --- -->

--- 

### Unit testing {.smaller}
Unit testing is a generic testing approach.

Your software is tested by focusing on smaller units, for instance a function or class.

::: columns
::: {.column width="50%"}

- in Python with [pytest](https://docs.pytest.org/en/7.1.x/) or [unittest](https://docs.python.org/3/library/unittest.html)
_(Extra packages\imports are needed)_

- in R with [testthat](https://testthat.r-lib.org/)

- in Matlab with [Testing frameworks](https://nl.mathworks.com/help/matlab/matlab-unit-test-framework.html)
:::

::: {.column width="50%"}
![](img/unit-testing.jpg)
:::
:::

--- 

#### When to write tests

:::{.callout-note}
It is always a balancing act: there is no "always/never"
:::

#### Questions to ask yourself
- Can I easily verify the outcome of my code visually (plot)?
- Do I want to reuse parts of my code?
- Do others rely on the code?
- Do I need to verify contributions from other developers?
- How do I ensure bugs don't return?

---

#### Python

With `pytest`:
```{python}
#| eval: false

# test_read_vector_value.py
import read_vector_value
import pytest
def test_retrieval():
    assert read_vector_value(0) == 10

def test_error():
    with pytest.assertRaises(IndexError):=
        read_vector_value(6)

```

In the terminal, call
```bash
pytest test_read_vector_value.py
```

---

#### R 
The easiest way to setup test infrastructure in R is with the [`usethis`](https://usethis.r-lib.org/).  In the project directory, run:

```{r}
#| eval: false
usethis::use_testthat() # to set up the test infrastructure
usethis::use_test("name") # to create a test file (for the script `R/name.R`)
```

The test file `tests/testthat/test-name.R` will be created with dummy content. Adapt the content of the test file:

```{r}
#| eval: false
test_that("read_vector_value retrieves first element of the vector", {
  expect_equal(read_vector_value(1), 10)
})

test_that("read_vector_value returns error if incorrect index provided",{
  expect_error(read_vector_value(6))
})

```

Run in your console (or `Cmd/Ctrl+Shift+T` if using RStudio):
```{r}
#| eval: false
devtools::test()
```


---

#### MATLAB

Using script-based testing
```matlab
% test parameters
my_vector = [10,5,4,12,25];

%% Test 1: index
value = read_vector_value(3, my_vector);
assert(value == 4)

%% Test 2: index out of range
try
    value = read_vector_value(6, my_vector);
catch ME
    assert(strcmp(ME.identifier,'MyComponent:indexError'))
end
```

```matlab
results = runtests('test_read_vector_value')
```

<!-- --- -->
<!-- # Your turn -->

<!-- #### Defensive programming -->
<!-- Check your code for conditions you believe will/should never happen and apply assert statements to prevent this. -->

<!-- #### Optional: Write a unit test -->
<!-- Write a unit test for a function -->

<!-- For python: -->
<!-- ```bash -->
<!-- pip install pytest -->
<!-- ``` -->


## Recommendations for writing robust software
- Error management
- Try-except statements
- Defensive programming
- Unit tests
- Automate with GitHub Actions / Gitlab runners

